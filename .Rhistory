install.packages("swirl")
library(swirl)
swirl()
5+7
x<- 5+7
x
y <- x-3
y
c(1.1, 9, 3.14)
z<- c(1.1, 9, 3.14)
?c
?Init
??Init
z
r<-c(z,555)
c(z, 555, z).
c(z, 555, z)
z * 2 + 100
my_sqrt<--sqrt(z-1)
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<- z/my_sqrt
my_div
c(1, 2, 3, 4)  + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
getwd()
ls()
x <- 9
ls(0)
ls()
list.files()
?list.files
args()
args(list.files)
getwd()
old.dir <- getwd()
dir.create()
dir.create(old.dir)
dir.create("testdir")
setwd("testdir")
file.create(mytest.R)
file.create(mytest.R"")
file.create("mytest.R")
ls(0)
ls()
list.files()
file.exists()
file.exists("mytest.R")
fiel.info("mytest.R")
file.info("mytest.R")
file.rename(mytest.R)
file.rename(mytest.R)
file.rename(mytest.R)
file.rename(mytest.R, mytest2.R)
file.info("mytest.R")
file.exists("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1", "folder2")
?dir.create
dir.create("testdir2")
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
unlink("testdir2")
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
unlink("testdir")
unlink("testdir", recursive = TRUE)
1:20
pi:10
15:1
?`:`
seq(1, 20)
seq(0, 10,
| by=0.5)
seq(0, 10, by=0.5)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length()
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
t
num_vect<- c(0.5, 55,-10,6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <-c("My", "name","is")
my_char
(my_char, collapse = " ")
paste(my_char, collapse = " ")
c(my_char, "Zosiek23").
my_name<-c(my_char, "Zosiek23")
my_name
paste(my_name, collapse = " ")
aste("Hello", "world!", sep = " ")
aste("Hello", "world!", sep = " ")p
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <-c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z),
| 100)
my_data <- sample(c(y, z),100)
is.na()
is.na(my_data)
my_na<-is.na(my_data)
my_na
my_data == NA
sum()
sum(my_na)
my_data
0/0
Inf/Inf
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[1:10]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf =NA)
vect
names(vect)
vect2<-c(11, 2, NA)
names(vect2) <-c("foo", "bar", "norf")
vect2
identical(vect2)
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <-my_vector
?matrix()
?matrix
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 4, byrow = FALSE,dimnames = NULL)
my_matrix2 <- matrix(my_matrix, byrow = FALSE,dimnames = NULL)
my_matrix2 <- matrix(my_matrix,  nrow = 4, ncol = 5)
identical(my_matrix,my_matrix2)
patient < -c("Bill","Gina", "Kelly", "Sean")
patients < -c("Bill","Gina", "Kelly", "Sean")
patients <- c("Bill","Gina", "Kelly", "Sean")
cbin(patients, my_matrix)
cbind(patients, my_matrix)
my_data <-data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- ("patient", "age", "weight", "bp", "rating","test")
cnames <- c("patient", "age", "weight", "bp", "rating","test")
colnames(my_data)
colnames(my_data) <- cnames
my_data
true==true
1==1
TRUE == TRUE
(FALSE == TRUE) == FALSE
6==7
6<7
10<=10
5!=7
5==7
! (5==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE |c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints>5
which(ints>7)
any (ints <0)
any (ints > 0)
all (ints > 0)
sys.date()
Sys.Date()
mean (c(2, 4, 5))
submit()
boring_function('My first function!')
boring_function
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
length (c(1,2))
sum (c(1,2))
avg <- sum(c(1,2))/ length (c(1,2))
avg
submit()
my_mean(c(4, 5, 10))
submit()
submit()
submit()
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
submit()
submit()
skip()
0
1
exit
exit
submit(0)
submit()
submit()
skip()
